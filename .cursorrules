You have extensive expertise in Vue 3, Nuxt 3, TypeScript, Bun, Vite, Vue Router, Pinia, VueUse, Vitest, Drizzle, and Tailwind CSS. You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

General

- It is a web application for learning Tagalog language.

Code Style and Structure

- Write clean, maintainable, and technically accurate TypeScript code.
- Prioritize functional and declarative programming patterns; avoid using classes.
- Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
- Prefer Composition API <script setup> style.
- Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your Nuxt application.
- Write JSDoc comments for all exported functions, variables, and types for better readability and understanding.

Directory Structure

- Use `app/pages` for page components.
- Use `app/components` for reusable components.
- Use `app/layouts` for layout components.
- Use `app/composables` for composables.
- Use `app/types` for type definitions.
- Use `app/utils` for utility functions.
- Use `server/api` for API endpoints.
- Use `server/db` for database models and queries.
- Use `server/utils` for utility functions.

HTML

- Specify `type` attribute for `<button>` elements.

Vue 3 Specifics

- In SFC file, define each section in order: `<script>`, `<template>`, `<style>`.
- In SFC file, add JSDoc at the top of `<script>` section to explain the component.
- Prefer `shallowRef` over `ref` unless deep watching is needed.
- Use `defineModel` for v-model bindings.
- Avoid using index for `key` attribute when using `v-for`.
- Prefer `v-show` over `v-if` for conditional visibility.
- Use `useTemplateRef` introduced in Vue 3.5 when you need a template reference.
- Define prop types by specifying `defineProps` generic rather than `Props` type. For example, `defineProps<{ level: number }>()`.
- Define emit types by specifying `defineEmits` generic rather than `Emits` type. For example, `defineEmits<{ (e: 'close'): void }>()`.
- Prefer type-only emit declarations introduced in Vue 3.3. For example, `defineEmits<{ change: [id: number] }>()`.
- Always add JSDoc to component props and emits.
- For a reactive variable, use `undefined` over `null` if the default value is not known.

Nuxt 3 Specifics

- Use explicit imports. Don't rely on Nuxt auto imports.
- Nuxt 3 provides auto imports, so thereâ€™s no need to manually import `ref`, `useState`, or `useRouter`.
- Take advantage of VueUse functions to enhance reactivity and performance.
- Use `useRuntimeConfig` to access and manage runtime configuration variables that differ between environments and are needed both on the server and client sides.
- Pass an object to `navigateTo` for better type safety. For example, `navigateTo({ name: 'about' })` instead of `navigateTo('/about')`.
- Pass an object to `<NuxtLink :to>` for better type safety. For example, `<NuxtLink :to="{ name: 'about' }">`.

Unit Testing

- Use Vitest for unit testing.
- Vitest API are globally available, so you don't need to import them (e.g., `describe`, `it`, `expect`, and so on).
- Prefer `it` over `test` for naming test cases.
- Prefer `it.each` over nested `it` blocks to test the same function with different values.

Naming Conventions

- Use UPPER_CASE for constants.
- Use upper case for acronyms. For example, name `getURL` instead of `getUrl`.
- Utilize composables, naming them as use<MyComposable>.
- Use **PascalCase** for component file names (e.g., `components/MyComponent.vue`).
- Use `Modal` prefix for modal components (e.g., `LevelSelectorModal.vue`).
- Favor named exports for functions to maintain consistency and readability.

TypeScript Usage

- Prefer function declarations over function expressions. However, when passing a function to a parameter, prefer using a function expression.
- Define function return types for better readability and type safety.
- Use type over interface when possible.
- Use literal union types over enums.
- Use `unknown` over `any`.
- Use `undefined` over `null` when possible.
- Prefer `for...of` statement over `forEach`. However, allow use of `forEach` when chaining.
- Avoid non-null assertion operator (`!`) unless absolutely sure the value cannot be `null` or `undefined`.
- Put `as const` on constant objects.
- Prefer the guard clause (early return) when the rest of the function can be executed through that return.
- Use `Set` postfix for Set object variables.
- Use `Map` postfix for Map object variables.

Tailwind CSS

- Use colors from the `colors` object in `app/tailwind.config.ts`.
